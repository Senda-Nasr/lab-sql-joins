USE sakila;

-- 1. List the number of films per category.
SELECT c.name , count(c.category_id) FROM film_category as fc
JOIN category as c
ON fc.category_id = c.category_id
GROUP BY c.name;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT st.store_id, ci.city, co.country FROM store as st
LEFT JOIN address as ad
ON st.address_id = ad.address_id
LEFT JOIN city as ci
ON ad.city_id = ci.city_id
LEFT JOIN country as co
ON ci.country_id = co.country_id;

-- 3.  Calculate the total revenue generated by each store in dollars.
SELECT SUM(p.amount) as 'total revenue', sto.store_id FROM payment AS p
LEFT JOIN staff AS sta
ON p.staff_id = sta.staff_id
LEFT JOIN store AS sto
ON sta.store_id = sto.store_id
GROUP BY sto.store_id;

-- 4.  Determine the average running time of films for each category.
SELECT fc.category_id, cat.name, AVG(f.length) AS 'Average running time' FROM film_category as fc
LEFT JOIN film as f
ON fc.film_id = f.film_id
LEFT JOIN category as cat
ON fc.category_id= cat.category_id
GROUP BY fc.category_id;

-- **Bonus**:

-- 5.  Identify the film categories with the longest average running time.
SELECT fc.category_id, cat.name, AVG(f.length) AS 'Average running time' FROM film_category as fc
LEFT JOIN film as f
ON fc.film_id = f.film_id
LEFT JOIN category as cat
ON fc.category_id= cat.category_id
GROUP BY fc.category_id
ORDER BY 'Average running time' DESC
LIMIT 1; -- NOTE: if want the category with the longest average running time

-- 6.  Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(r.rental_id) AS 'Number of Times Rented' FROM rental AS r
JOIN inventory as i
ON r.inventory_id = i.inventory_id
JOIN film as f
ON i.film_id = f.film_id
GROUP BY i.film_id
ORDER BY COUNT(r.rental_id) DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title, i.store_id FROM film as f
JOIN inventory as i
ON f.film_id= i.film_id
HAVING i.store_id=1 and f.title= 'ACADEMY DINOSAUR';
-- Yes it can be rented from store 1
 
-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column 
-- indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, 
-- and this information can be obtained using a `CASE` statement combined with `IFNULL`."
SELECT DISTINCT(f.title),
CASE 
WHEN  i.inventory_id IS NULL THEN 'Not Available'
ELSE 'Available'
END AS Availability
FROM film as f
LEFT JOIN inventory as i
ON f.film_id = i.film_id;
